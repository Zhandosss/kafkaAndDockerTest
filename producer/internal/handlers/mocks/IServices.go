// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	model "Messaggio/producer/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// IServices is an autogenerated mock type for the IServices type
type IServices struct {
	mock.Mock
}

// DeleteMessage provides a mock function with given fields: id
func (_m *IServices) DeleteMessage(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMessages provides a mock function with given fields:
func (_m *IServices) DeleteMessages() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteMessages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMessage provides a mock function with given fields: id
func (_m *IServices) GetMessage(id string) (*model.Message, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetMessage")
	}

	var r0 *model.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Message, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Message); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessages provides a mock function with given fields:
func (_m *IServices) GetMessages() ([]*model.Message, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMessages")
	}

	var r0 []*model.Message
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*model.Message, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*model.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Message)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatsByDays provides a mock function with given fields:
func (_m *IServices) GetStatsByDays() (map[string]*model.ByDays, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStatsByDays")
	}

	var r0 map[string]*model.ByDays
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]*model.ByDays, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]*model.ByDays); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*model.ByDays)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveMessage provides a mock function with given fields: message
func (_m *IServices) SaveMessage(message *model.Message) (string, error) {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for SaveMessage")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Message) (string, error)); ok {
		return rf(message)
	}
	if rf, ok := ret.Get(0).(func(*model.Message) string); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*model.Message) error); ok {
		r1 = rf(message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIServices creates a new instance of IServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *IServices {
	mock := &IServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
